name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test and Build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: erplab
          POSTGRES_PASSWORD: erplab123
          POSTGRES_DB: erplab_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run Lint
      run: npm run lint

    - name: Build project
      run: npm run build

    - name: Run unit tests
      run: npm test -- --coverage

    - name: Run E2E tests
      run: npm run test:e2e
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USERNAME: erplab
        DB_PASSWORD: erplab123
        DB_DATABASE: erplab_test
        JWT_SECRET: test-secret-key
        JWT_EXPIRES_IN: 24h
        JWT_REFRESH_EXPIRES_IN: 7d

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: matrix.node-version == '20.x'
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

    - name: Archive production artifacts
      uses: actions/upload-artifact@v4
      if: matrix.node-version == '20.x'
      with:
        name: dist
        path: dist

  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Run security audit
      run: npm audit --audit-level=moderate

    - name: Check for known vulnerabilities
      run: npx snyk test --severity-threshold=high
      continue-on-error: true

  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      continue-on-error: true

  deploy:
    name: Deploy to Staging
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to staging server
      run: |
        echo "Deploying to staging..."
        # Add deployment commands here

  notify:
    name: Notify Team
    needs: [test, security, code-quality]
    runs-on: ubuntu-latest
    if: failure()

    steps:
    - name: Send notification
      run: |
        echo "Pipeline failed! Sending notifications..."
        # Add notification logic (Slack, Discord, Email, etc.)